// index.ts
import { app, shell, BrowserWindow, ipcMain } from 'electron'
import { join } from 'path'
import { electronApp, optimizer, is } from '@electron-toolkit/utils'
import icon from '../../resources/icon.png?asset'

// ÏÉàÎ°úÏö¥ ÏïÑÌÇ§ÌÖçÏ≤ò import
import { FileChatRepository } from '../platform/electron/repositories/FileChatRepository'
import { FileConfigRepository } from '../platform/electron/repositories/FileConfigRepository'
import { HChatLLMService } from '../services/LLM/HChatLLMService'
import { MCPManagerService } from '../services/MCP/MCPManagerService'
import { SystemInitializer, SystemComponents } from '../core/system/SystemInitializer'
import * as path from 'path'

// Force UTF-8 encoding for console output
process.stdout.setDefaultEncoding('utf8');
process.stderr.setDefaultEncoding('utf8');

// ÏãúÏä§ÌÖú Ïª¥Ìè¨ÎÑåÌä∏Îì§
let systemComponents: SystemComponents | null = null;
let systemInitializer: SystemInitializer | null = null;

function createWindow(): void {
  const mainWindow = new BrowserWindow({
    width: 900,
    height: 670,
    show: false,
    autoHideMenuBar: true,
    ...(process.platform === 'linux' ? { icon } : {}),
    webPreferences: {
      preload: join(__dirname, '../preload/index.js'),
      sandbox: false
    }
  })

  mainWindow.on('ready-to-show', () => {
    mainWindow.show()
  })

  mainWindow.webContents.setWindowOpenHandler((details) => {
    shell.openExternal(details.url)
    return { action: 'deny' }
  })

  if (is.dev && process.env['ELECTRON_RENDERER_URL']) {
    mainWindow.loadURL(process.env['ELECTRON_RENDERER_URL'])
  } else {
    mainWindow.loadFile(join(__dirname, '../renderer/index.html'))
  }
}

async function initializeSystem(): Promise<void> {
  console.log('üîÑ Initializing system services...');
  
  try {
    // ÌîåÎû´ÌèºÎ≥Ñ Î¶¨Ìè¨ÏßÄÌÜ†Î¶¨ Î∞è ÏÑúÎπÑÏä§ Ï¥àÍ∏∞Ìôî
    const appDataDir = path.join(app.getPath('userData'), 'data');
    const chatRepository = new FileChatRepository(appDataDir);
    const configRepository = new FileConfigRepository(appDataDir);
    const llmService = new HChatLLMService();
    const mcpService = new MCPManagerService();
    
    // ÏãúÏä§ÌÖú Ï¥àÍ∏∞ÌôîÍ∏∞ ÏÉùÏÑ±
    systemInitializer = new SystemInitializer(
      chatRepository,
      configRepository,
      llmService,
      mcpService,
      appDataDir
    );
    
    // ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî Ïã§Ìñâ
    const result = await systemInitializer.initialize();
    
    if (result.success) {
      systemComponents = result.components!;
      console.log('‚úÖ System initialization completed successfully');
      
      // Í≤ΩÍ≥†ÏÇ¨Ìï≠ Ï∂úÎ†•
      if (result.warnings.length > 0) {
        console.log('‚ö†Ô∏è Warnings during initialization:');
        result.warnings.forEach(warning => console.log(`  - ${warning}`));
      }
    } else {
      console.error('‚ùå System initialization failed:');
      result.errors.forEach(error => console.error(`  - ${error}`));
      throw new Error('System initialization failed');
    }
    
  } catch (error) {
    console.error('‚ùå Critical system initialization error:', error);
    throw error;
  }
}

app.whenReady().then(async () => {
  electronApp.setAppUserModelId('com.update-chat')

  app.on('browser-window-created', (_, window) => {
    optimizer.watchWindowShortcuts(window)
  })

  createWindow()
  await initializeSystem()

  app.on('activate', function () {
    if (BrowserWindow.getAllWindows().length === 0) createWindow()
  })
})

// ============================================================================
// IPC Ìï∏Îì§Îü¨Îì§ (Í∏∞Ï°¥Í≥º ÎèôÏùºÌïú Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ Ïú†ÏßÄ)
// ============================================================================

// MCP ÎèÑÍµ¨ Î™©Î°ù Ï°∞Ìöå Ìï∏Îì§Îü¨
ipcMain.handle('mcp-list-tools', async () => {
  try {
    if (!systemComponents) {
      return { success: false, error: 'System not initialized' }
    }
    const tools = await systemComponents.mcpService.listAllTools()
    return { success: true, tools }
  } catch (error) {
    console.error('‚ùå MCP tools list retrieval failed:', error)
    return { success: false, error: error instanceof Error ? error.message : String(error) }
  }
})

// MCP ÎèÑÍµ¨ Ïã§Ìñâ Ìï∏Îì§Îü¨
ipcMain.handle('mcp-call-tool', async (_, { serverName, toolName, args }) => {
  try {
    if (!systemComponents) {
      return { success: false, error: 'System not initialized' }
    }
    const result = await systemComponents.mcpService.callTool(serverName, toolName, args)
    return { success: true, result }
  } catch (error) {
    console.error('‚ùå MCP tool execution failed:', error)
    return { success: false, error: error instanceof Error ? error.message : String(error) }
  }
})

// LLM Ïä§Ìä∏Î¶¨Î∞ç ÏöîÏ≤≠ Ìï∏Îì§Îü¨
ipcMain.handle('llm-stream-request', async (event, data) => {
  try {
    if (!systemComponents) {
      return { success: false, error: 'System not initialized' }
    }
    
    const callback = {
      onChunk: (chunk: string, fullResponse: string) => {
        event.sender.send('llm-stream-chunk', { chunk, fullResponse });
      },
      onComplete: (fullResponse: string) => {
        event.sender.send('llm-stream-complete', { content: fullResponse });
      },
      onError: (error: string) => {
        event.sender.send('llm-stream-error', { error });
      }
    };

    await systemComponents.chatUseCase.processStreamingRequest(data, callback);
    return { success: true };
  } catch (error) {
    console.error('‚ùå LLM streaming request failed:', error);
    return { 
      success: false, 
      error: error instanceof Error ? error.message : String(error) 
    };
  }
})

// Ï±ÑÌåÖ ÏÑ∏ÏÖò Ï°∞Ìöå Ìï∏Îì§Îü¨
ipcMain.handle('get-chat-sessions', async () => {
  try {
    if (!systemComponents) {
      return []
    }
    return await systemComponents.chatUseCase.getSessions();
  } catch (error) {
    console.error('‚ùå Get chat sessions failed:', error);
    return [];
  }
})

// Ï±ÑÌåÖ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ìï∏Îì§Îü¨
ipcMain.handle('get-chat-data', async (_, sessionId: string) => {
  try {
    if (!systemComponents) {
      return null
    }
    return await systemComponents.chatUseCase.getChatData(sessionId);
  } catch (error) {
    console.error('‚ùå Get chat data failed:', error);
    return null;
  }
})

// Ï±ÑÌåÖ ÏÑ∏ÏÖò Ï†ÄÏû• Ìï∏Îì§Îü¨
ipcMain.handle('save-chat-session', async (_, session) => {
  try {
    if (!systemComponents) {
      return { success: false, error: 'System not initialized' }
    }
    await systemComponents.chatUseCase.saveSession(session);
    return { success: true };
  } catch (error) {
    console.error('‚ùå Save chat session failed:', error);
    return { success: false, error: error instanceof Error ? error.message : String(error) };
  }
})

// Ï±ÑÌåÖ Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• Ìï∏Îì§Îü¨
ipcMain.handle('save-chat-data', async (_, chatData) => {
  try {
    if (!systemComponents) {
      return { success: false, error: 'System not initialized' }
    }
    await systemComponents.chatUseCase.saveChatData(chatData);
    return { success: true };
  } catch (error) {
    console.error('‚ùå Save chat data failed:', error);
    return { success: false, error: error instanceof Error ? error.message : String(error) };
  }
})

// Ï±ÑÌåÖ ÏÑ∏ÏÖò ÏÇ≠Ï†ú Ìï∏Îì§Îü¨
ipcMain.handle('delete-chat-session', async (_, sessionId: string) => {
  try {
    if (!systemComponents) {
      return { success: false, error: 'System not initialized' }
    }
    await systemComponents.chatUseCase.deleteSession(sessionId);
    return { success: true };
  } catch (error) {
    console.error('‚ùå Delete chat session failed:', error);
    return { success: false, error: error instanceof Error ? error.message : String(error) };
  }
})

// Ï±ÑÌåÖ ÏÑ∏ÏÖò Ïù¥Î¶Ñ Î≥ÄÍ≤Ω Ìï∏Îì§Îü¨
ipcMain.handle('rename-chat-session', async (_, { sessionId, newTitle }) => {
  try {
    if (!systemComponents) {
      return { success: false, error: 'System not initialized' }
    }
    await systemComponents.chatUseCase.updateSessionTitle(sessionId, newTitle);
    return { success: true };
  } catch (error) {
    console.error('‚ùå Rename chat session failed:', error);
    return { success: false, error: error instanceof Error ? error.message : String(error) };
  }
})

// API ÌÇ§ Ï°∞Ìöå Ìï∏Îì§Îü¨
ipcMain.handle('get-api-key', async () => {
  try {
    if (!systemComponents) {
      return null
    }
    return await systemComponents.configUseCase.getApiKey();
  } catch (error) {
    console.error('‚ùå Get API key failed:', error);
    return null;
  }
})

// API ÌÇ§ Ï†ÄÏû• Ìï∏Îì§Îü¨
ipcMain.handle('save-api-key', async (_, apiKey: string) => {
  try {
    if (!systemComponents) {
      return { success: false, error: 'System not initialized' }
    }
    await systemComponents.configUseCase.saveApiKey(apiKey);
    // LLM ÏÑúÎπÑÏä§Ïóê ÏÉàÎ°úÏö¥ API ÌÇ§ ÏÑ§Ï†ï
    systemComponents.llmService.setApiKey(apiKey);
    return { success: true };
  } catch (error) {
    console.error('‚ùå Save API key failed:', error);
    return { success: false, error: error instanceof Error ? error.message : String(error) };
  }
})

// System Prompt Ï°∞Ìöå Ìï∏Îì§Îü¨
ipcMain.handle('get-system-prompt', async () => {
  try {
    if (!systemComponents) {
      return 'You are a helpful assistant.'
    }
    return await systemComponents.configUseCase.getSystemPrompt();
  } catch (error) {
    console.error('‚ùå Get system prompt failed:', error);
    return 'You are a helpful assistant.';
  }
})

// System Prompt Ï†ÄÏû• Ìï∏Îì§Îü¨
ipcMain.handle('save-system-prompt', async (_, systemPrompt: string) => {
  try {
    if (!systemComponents) {
      return { success: false, error: 'System not initialized' }
    }
    await systemComponents.configUseCase.saveSystemPrompt(systemPrompt);
    return { success: true };
  } catch (error) {
    console.error('‚ùå Save system prompt failed:', error);
    return { success: false, error: error instanceof Error ? error.message : String(error) };
  }
})

// Theme Ï°∞Ìöå Ìï∏Îì§Îü¨
ipcMain.handle('get-theme', async () => {
  try {
    if (!systemComponents) {
      return 'system'
    }
    return await systemComponents.configUseCase.getTheme();
  } catch (error) {
    console.error('‚ùå Get theme failed:', error);
    return 'system';
  }
})

// Theme Ï†ÄÏû• Ìï∏Îì§Îü¨
ipcMain.handle('save-theme', async (_, theme: 'light' | 'dark' | 'system') => {
  try {
    if (!systemComponents) {
      return { success: false, error: 'System not initialized' }
    }
    await systemComponents.configUseCase.saveTheme(theme);
    return { success: true };
  } catch (error) {
    console.error('‚ùå Save theme failed:', error);
    return { success: false, error: error instanceof Error ? error.message : String(error) };
  }
})

// Default Model Ï°∞Ìöå Ìï∏Îì§Îü¨
ipcMain.handle('get-default-model', async () => {
  try {
    if (!systemComponents) {
      return 'claude-opus-4'
    }
    return await systemComponents.configUseCase.getDefaultModel();
  } catch (error) {
    console.error('‚ùå Get default model failed:', error);
    return 'claude-opus-4';
  }
})

// Default Model Ï†ÄÏû• Ìï∏Îì§Îü¨
ipcMain.handle('save-default-model', async (_, model: string) => {
  try {
    if (!systemComponents) {
      return { success: false, error: 'System not initialized' }
    }
    await systemComponents.configUseCase.saveDefaultModel(model);
    return { success: true };
  } catch (error) {
    console.error('‚ùå Save default model failed:', error);
    return { success: false, error: error instanceof Error ? error.message : String(error) };
  }
})

// MCP Config Ï†ÄÏû• Ìï∏Îì§Îü¨
ipcMain.handle('save-mcp-config', async (_, mcpConfig) => {
  try {
    if (!systemComponents) {
      return { success: false, error: 'System not initialized' }
    }
    await systemComponents.configUseCase.saveMCPConfig(mcpConfig);
    await systemComponents.mcpService.loadFromConfig(mcpConfig);
    return { success: true };
  } catch (error) {
    console.error('‚ùå Save MCP config failed:', error);
    return { success: false, error: error instanceof Error ? error.message : String(error) };
  }
})

// ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò ÏÉÅÌÉú Ï°∞Ìöå Ìï∏Îì§Îü¨
ipcMain.handle('get-migration-status', async () => {
  try {
    if (!systemComponents) {
      return { success: false, error: 'System not initialized' }
    }
    const status = await systemComponents.chatUseCase.getMigrationStatus();
    return { success: true, status };
  } catch (error) {
    console.error('‚ùå Migration status check failed:', error);
    return { 
      success: false, 
      error: error instanceof Error ? error.message : String(error) 
    };
  }
})

// ÏàòÎèô ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò Ïã§Ìñâ Ìï∏Îì§Îü¨
ipcMain.handle('run-migration', async () => {
  try {
    if (!systemComponents) {
      return { success: false, error: 'System not initialized' }
    }
    const result = await systemComponents.chatUseCase.migrate();
    return { success: true, result };
  } catch (error) {
    console.error('‚ùå Manual migration failed:', error);
    return { 
      success: false, 
      error: error instanceof Error ? error.message : String(error) 
    };
  }
})

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})
